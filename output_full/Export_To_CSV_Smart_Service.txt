
layout: basic
title: Export Data Store Entity to CSV Smart Service
category: function_page
compatibility: '~portal, -om, -crf'
excerpt: The Export Data Store Entity to CSV Smart Service allows designers to safely export large datasets.
fnccat: Smart_Service
fncexample: Click on the function name for examples.
fncname: a!exportDataStoreEntityToCsv
fncsubcat: Document_Generation
parameters:
  - keyword: entity
    types: Data Store Entity
    description: The data store entity to query.
  - keyword: selection
    types: Selection
    description: '(Optional) A list of fields to retrieve, created with a!querySelection().'
  - keyword: aggregation
    types: Aggregation
    description: '(Optional) A list of fields and the operations to perform on them when retrieving the data, created with a!queryAggregation().'
  - keyword: filters
    types: Any Type
    description: '(Optional) A set of conditions to apply to the queried data before any grouping or aggregation. Can use either a list of a!queryFilter() or a single a!queryLogicalExpression(). When using a list of a!queryFilter(), all filters are combined using the AND operator.'
  - keyword: documentName
    types: Text
    description: The name of the new document that is to be created by this smart service.
  - keyword: documentDescription
    types: Text
    description: (Optional) A brief description of the document.
  - keyword: saveInFolder
    types: Folder
    description: The folder where the newly created document is to be stored. Applicable and required when creating a new document.
  - keyword: documentToUpdate
    types: Document
    description: The existing document to update with the exported data. Using this parameter will append new contents at the end of the file. Note that a new version of this document will be created.
  - keyword: includeHeader
    types: Boolean
    description: (Optional) Outputs the field's label in the first row of the document if set to true. Default is true.
  - keyword: csvDelimiter
    types: Text
    description: '(Optional) The field delimiter used to separate fields in the CSV file. Valid values include "TAB", "COMMA", "SEMICOLON", "SPACE", "PIPE", "CARET". Default is "COMMA".'
  - keyword: onSuccess
    types: Any Type
    description: A list of saves or an HTTP response to execute after the smart service executes successfully. Created with a!save() or a!httpResponse(). The document ID of the created/updated document is returned in the fv!newDocument function variable.
  - keyword: onError
    types: Any Type
    description: A list of saves or an HTTP response to execute when the smart service does not execute successfully. Created with a!save() or a!httpResponse().
reftype: smart_service
sscat: Document_Generation
ssicon: Export_Data_Store_Entity_to_CSV.png
ssparentcat: Automation_Services


appian-style-note
This is the new Export to CSV Smart Service. If you need to export to Excel, use the Export to Excel Smart Service.

Overview
The Export Data Store Entity to CSV Smart Service allows designers to safely export large datasets.
It can be used to export data from Appian that can then be imported into other third-party applications. A designer may want to export all data or just updates made within the last day.
The Smart Service returns a document in a CSV format. 
Properties

Category: Document Generation

Icon:  


Assignment Options: This smart service can be either attended or unattended (default).


Configuration options
Data tab
Node inputs
| Name | Data Type | Description | Required | Multiple |
| - | - | - | - | - |
| Data Store Entity | Data Store Entity | The data store entity to query. | Yes | No |
| Selection | Selection | A list of fields to retrieve, created with a!querySelection(). | No | No |
| Aggregation | Aggregation | A list of fields and the operations to perform on them when retrieving the data, created with a!queryAggregation(). | No | No |
| Filters | Any Type | A set of conditions to apply to the queried data before any grouping or aggregation. Can use either a list of a!queryFilter() or a single a!queryLogicalExpression(). When using a list of a!queryFilter(), all filters are combined using the AND operator. | No | Yes |
| New Document Name | Text | The name of the new document created. | No | No |
| New Document Description | Text | A brief description of the document. | No | No |
| Save in Folder | Folder | The folder to store the new document in. Required when creating a new document. | No | No |
| Document to Update | Document | The document to be updated as a result of the export operation. This can be useful when  using the smart service multiple times in the same process model. New contents will be appended at the end of the file. | No | No |
| Include Header | Boolean | Outputs the field name in the first row of the document if set to true. Default is true | No | No |
| CSV Delimiter | Text | The field delimiter used to separate fields in the CSV file. Valid values include "TAB", "COMMA", "SEMICOLON", "SPACE", "PIPE", "CARET". Default is "COMMA". | No | No |
Node outputs
| Name | Data Type | Description |
| - | - | - |
| New Document | Document | The document generated as a result of executing this smart service. |
a!exportDataStoreEntityToCsv()
Exports the selected data store entity to CSV. This function will only execute inside a saveInto or a Web API.
Syntax
{% include fncsyntax.html %}
Parameters
{% include parameter_table.html parameters=page.parameters header=page.reftype %}
Returns
Document
Example
Copy and paste an example into an Appian Expression Editor to experiment with it.
Replace the ENTITY and FOLDER with the appropriate constants for your application.
sail 
a!localVariables(
  local!exportDocId,
  local!errorMessage,
  {
    if(
      isnull(local!exportDocId),
      /*This link field contains the link that starts the export*/
      a!linkField(
        labelPosition: "COLLAPSED",
        links: a!dynamicLink(
          label: "Export to CSV File",
          saveInto: {
            a!exportDataStoreEntityToCsv(
              entity: cons!ENTITY,
              documentName: "CSV Export " & now(),
              saveInFolder: cons!FOLDER,
              onSuccess: a!save(
                local!exportDocId,
                fv!newDocument
              ),
              /*This displays an error if there is an issue executing the save*/
              onError: a!save(
                local!errorMessage,
                "Error Exporting File to CSV"
              )
            )
          }
        )
      ),
      {}
    ),
    if(
      /*This only displays the download link if a valid document was created*/
      not(isnull(local!exportDocId)),
      /*This changes the link to a download link for the newly created document */
      a!linkField(
        links: a!documentDownloadLink(
          label: "Download CSV File",
          document: local!exportDocId
        )
      ),
      a!textField(
        value: local!errorMessage,
        readOnly: true
      )
    )
  }
) 
Usage considerations
The following configurations and expected behavior apply when using the Export Data Store Entity to CSV Smart Service from the Process Modeler:

To export fields in a specific order, make sure to specify the Selection parameter. Otherwise, the order of the exported fields will not be guaranteed.  
You may specify either the Selection parameter or the Aggregation parameter but not both. If you do not specify either parameter, all fields are returned.
You may specify either a LogicalExpression or a list of Filters in the Filters parameter but not both. If you wish to specify only one condition, specify a Filter. If you wish to specify more than one condition, use LogicalExpression or use a list of Filters. 
To create a CSV file with data from different data store entities, use multiple nodes of this smart service. You can use the Document to Update when exporting a second data store entity.

INCLUDE PAGE: Avoiding Query Timeouts when Exporting Data
Related objects
Data Types:

Selection
Aggregation
Query Filter
Logical Expression
