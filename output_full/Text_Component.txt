
layout: function
title: Text Component
category: function_page
compatibility: -crf
excerpt: Displays and allows entry of a single line of text.
fnccat: Interface_Component
fncexample: Click on the function name for examples.
fncname: a!textField
fncsubcat: Inputs
parameters:
  - keyword: label
    name: Label
    types: Text
    description: Text to display as the field label.
  - keyword: instructions
    name: Instructions
    types: Text
    description: Supplemental text about this field.
  - keyword: required
    name: Required
    types: Boolean
    description: |
      Determines if a value is required to submit the form. Default: false.
  - keyword: readOnly
    name: Read-only
    types: Boolean
    description: |
      Determines if the field should display as not editable. Default: false.
  - keyword: disabled
    name: Disabled
    types: Boolean
    description: |
      Determines if the field should display as potentially editable but grayed out. Default: false.
  - keyword: value
    name: Display Value
    types: Text
    description: Text to display in the text field.
  - keyword: validations
    name: Validations
    types: List of Text String
    description: Validation errors to display below the field when the value is not null.
  - keyword: saveInto
    name: Save Input To
    types: List of Save
    description: |
      One or more variables that are updated with the text when the user changes it. Use a!save() to save a modified or alternative value to a variable.
  - keyword: refreshAfter
    name: Refresh After
    types: Text
    description: |
      Determines when the interface is refreshed with the saved value from the barcode field. Valid values are "KEYPRESS" to refresh after every character typed into the field and "UNFOCUS" (the default value) to refresh when the user deselects the field after changing its value.
  - keyword: validationGroup
    name: Validation Group
    types: Text
    description: |
      When present, this field is only validated when a button in the same validation group is pressed. See the documentation for more information about how to use validation groups.
  - keyword: requiredMessage
    name: Required Message
    types: Text
    description: |
      Custom message to display when the field's value is required and not provided.
  - keyword: align
    name: Alignment
    types: Text
    description: |
      Determines alignment of the text value. Appian recommends this setting only be used inside the Grid Layout component. Valid values: "LEFT", "CENTER", "RIGHT".
  - keyword: labelPosition
    name: Label Position
    types: Text
    description: |
      Determines where the label appears. Valid values:
        - "ABOVE" (default) Displays the label above the component.
        - "ADJACENT" Displays the label to the left of the component.
        - "COLLAPSED" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information.
        - "JUSTIFIED" Aligns the label alongside the component starting at the edge of the page.
  - keyword: placeholder
    name: Placeholder
    types: Text
    description: Text to display in the field when it is empty. Does not show if the field is read only.
  - keyword: helpTooltip
    name: Help Tooltip
    types: Text
    description: |
      Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is "COLLAPSED".
  - keyword: masked
    name: Masked
    types: Boolean
    description: |
      Determines if the value is obscured from view. Default: false.
  - keyword: accessibilityText
    name: Accessibility Text
    types: Text
    description: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.
  - keyword: showWhen
    name: Visibility
    types: Boolean
    description: |
      Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.
  - keyword: inputPurpose
    name: Input Purpose
    types: Text
    description: |
      Indicates the intent of input for accessibility improvements, like autocomplete, used by browsers and assistive technologies. Valid values are "NAME", "EMAIL", "PHONE_NUMBER", "STREET_ADDRESS", "POSTAL_CODE", "CREDIT_CARD_NUMBER", and "OFF".
  - keyword: characterLimit
    name: Character Limit
    types: Number (Integer)
    description: |
      Determines the maximum number of characters. Depending on the language, some characters may count as more than one.
  - keyword: showCharacterCount
    name: Show Character Limit Count
    types: Boolean
    description: |
      Determines if the character count displays on the text field. Only applicable if the character limit is set. Default: true.
reftype: sailcomponent
related_patterns_mods: 'or, title: Text, sr-tags: Formatting'
scdisplayname: Text
space: sail_component

Function
{% include fncsyntax.html %}
{{ page.excerpt }} For a multiple line of text, use a paragraph component.
Parameters
{% include parameter_table.html parameters=page.parameters header=page.reftype %}
Usage considerations
Displaying different data types and placeholder text

This component is useful for displaying values of another type that require formatting other than the original typeâ€™s default formatting.
Whether placeholder text clears on focus or input varies by device and browser. 

Using the characterLimit parameter

Emojis and characters in some languages (for example, Chinese and Arabic) may be counted by characterLimit as more than one character.
The characterLimit parameter and character limits set on CDT fields must be independently maintained to ensure that the two limits match.
If you set readOnly to true, the component's character limit won't be displayed.

Using the readOnly parameter

If readOnly is set to true, the component's value displays without a box around it.
If you pass the same local variable to value and saveInto when readOnly is set to false, you can use the user's input in the component to modify the interface, such as filtering a grid.

Using inputPurpose parameter

When using inputPurpose, there is no visible change in the form factor preview.
If inputPurpose is set to "OFF", autocomplete may be disabled depending on your browser settings. The default behavior allows for autocomplete, but does not require you to specify inputs.
inputPurpose is not supported if the masked parameter is set to true. 

Examples
INCLUDE PAGE: SAIL intro
Text with only a label
{% sailbox 600 %}
a!textField(
  label: "Title",
  value: "Expenses could not be submitted",
  readOnly: true
)
{% endsailbox %}
Text with label and instructions
{% sailbox 600 %}
a!textField(
  label: "Title",
  instructions: "The ticket title is exactly as entered by the creator",
  value: "Expenses could not be submitted",
  readOnly: true
)
{% endsailbox %}
Time with 24-hour formatting
{% sailbox 600 %}
a!textField(
  label: "Daily Meeting Time",
  value: text(time(13, 20), "hh:mm"),
  readOnly: true
)
{% endsailbox %}
Integer with no formatting or with special formatting
This example shows an integer with no thousand separators.
{% sailbox 600 %}
a!textField(
  label: "Reference Number",
  value: 12345,
  readOnly: true
)
{% endsailbox %}
Integer formatted as currency
{% sailbox 600 %}
a!textField(
  label: "Amount",
  value: dollar(12345),
  readOnly: true
)
{% endsailbox %}
Date with "m/dd/yy" formatting
{% sailbox 600 %}
a!textField(
  label: "Created On",
  value: text(date(2013,1,12), "m/dd/yy"),
  readOnly: true
)
{% endsailbox %}
Date and time with "m/dd/yy h:mm a" formatting
{% sailbox 600 %}
a!textField(
  label: "Created On",
  value: text(datetime(2013,1,12, 11, 20), "m/dd/yy h:mm a"),
  readOnly: true
)
{% endsailbox %}
Text with character limit
This example uses the characterLimit parameter to validate that a user's entry meets a particular limit.
{% sailbox 600 %}
a!localVariables(
  local!storedPhoneNumber: "555-456-7890-876",
  a!textField(
    label: "Phone Number",
    instructions: "Include only dashes and numbers. For example, 555-456-7890.",
    value: local!storedPhoneNumber,
    saveInto: local!storedPhoneNumber,
    characterLimit: 12,
    showCharacterCount: true
  )
)
{% endsailbox %}