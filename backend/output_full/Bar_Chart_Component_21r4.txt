
layout: function
title: a!barChartField_21r4 Component
category: function_page
compatibility: -crf
excerpt: Displays numerical data as horizontal bars. Use a bar chart to display several values at the same point in time.
fnccat: Interface_Component
fncexample: Click on the function name for examples.
fncname: a!barChartField_21r4
evolved_fncname: a!barChartField
evolved_reason: "Fixed existing behavior in stacked bar charts so that the values in the stacked bars display in the same order as the items in the legend."
fncsubcat: Charts
parameters:
  - keyword: label
    name: Label
    types: Text
    description: Text to display as the field label.
  - keyword: instructions
    name: Instructions
    types: Text
    description: Supplemental text about this field.
  - keyword: categories
    name: Categories
    types: Text Array
    description: Text to display on the x-axis next to each bar.
  - keyword: series
    name: Series
    types: Chart Series Array
    description: Array of data series created with a!chartSeries().
  - keyword: xAxisTitle
    name: X-Axis Title
    types: Text
    description: Title for the independent (vertical) axis.
  - keyword: yAxisTitle
    name: Y-Axis Title
    types: Text
    description: Title for the dependent (horizontal) axis.
  - keyword: yAxisMin
    name: Min Y-Axis
    types: Number (Decimal)
    description: Determines the minimum displayed point on the horizontal axis.
  - keyword: yAxisMax
    name: Max Y-Axis
    types: Number (Decimal)
    description: Determines the maximum displayed point on the horizontal axis.
  - keyword: stacking
    name: Stacking
    types: Text
    description: |
      Determines if series values display as separate bars, stacked within one bar to show the sum of series values, or stacked to a height of 100% to show the contribution to the whole within each category. Valid values: "NONE" (default), "NORMAL", "PERCENT_TO_TOTAL".
  - keyword: referenceLines
    name: Reference Lines
    types: Chart Reference Lines Array
    description: Array of reference line values for each threshold to be defined on the chart. Configured using a!chartReferenceLine().
  - keyword: showLegend
    name: Show legend
    types: Boolean
    description: |
      Determines if a color legend displays below the chart. Default: true.
  - keyword: showDataLabels
    name: Show data labels
    types: Boolean
    description: |
      Determines if data values are displayed next to each bar. Default: false.
  - keyword: showTooltips
    name: Show tooltips
    types: Boolean
    description: |
      Determines if a tooltip displays the data value for a bar. Default: true.
  - keyword: allowDecimalAxisLabels
    name: Allow decimal axis labels
    types: Boolean
    description: |
      Allows dependent (horizontal) values to display as decimal numbers instead of integers. Default: false.
  - keyword: labelPosition
    name: Label Position
    types: Text
    description: |
      Determines where the label appears. Valid values: 
        - "ABOVE" (default) Displays the label above the component.
        - "ADJACENT" Displays the label to the left of the component.
        - "COLLAPSED" Hides the label. The label will still be read by screen readers; see accessibility considerations for more information.
        - "JUSTIFIED" Aligns the label alongside the component starting at the edge of the page.
  - keyword: helpTooltip
    name: Help Tooltip
    types: Text
    description: |
      Displays a help icon with the specified text as a tooltip. The tooltip displays a maximum of 500 characters. The help icon does not show when the label position is "COLLAPSED".
  - keyword: accessibilityText
    name: Accessibility Text
    types: Text
    description: Additional text to be announced by screen readers. Used only for accessibility; produces no visible change.
  - keyword: showWhen
    name: Visibility
    types: Boolean
    description: |
      Determines whether the component is displayed on the interface. When set to false, the component is hidden and is not evaluated. Default: true.
  - keyword: colorScheme
    name: Color scheme
    types: Any type
    description: |
      Determines which color scheme to use in the chart. Use one of the following valid values: "CLASSIC" (default), "MIDNIGHT", "OCEAN", "MOSS", "BERRY", "PARACHUTE", "RAINFOREST", "SUNSET" or define a custom color scheme using a!colorSchemeCustom. See Chart Color Scheme for color scheme examples.
  - keyword: height
    name: Height
    types: Text
    description: |
      Determines the chart height. Valid values: "MICRO", "SHORT", "MEDIUM", "TALL", "AUTO" (default). See Chart Heights for guidance on using the "MICRO" size.
  - keyword: xAxisStyle
    name: X-Axis Style
    types: Text
    description: 'Determines how to display the labels and axis separators for the X-Axis. Valid values: "STANDARD" (default), "NONE".'
  - keyword: yAxisStyle
    name: Y-Axis Style
    types: Text
    description: |
      Determines how to display the labels, axis separators, and grid lines for the Y-Axis. Valid values: "STANDARD" (default), "MINIMAL", "NONE".
  - keyword: data
    name: Data
    types: Any type
    description: Reference to the record type used for the source of this chart. Can accept a!recordData or a record type reference.
  - keyword: config
    name: Chart Configuration
    types: BarChartConfig
    description: |
      Configures how to display data on the chart, including fields used for calculations and grouping, using a!barChartConfig().
  - keyword: refreshAlways
    name: Refresh Always
    types: Boolean
    description: |
      When true, chart data will be refreshed after each user interaction and each interval refresh. Default: false.
  - keyword: refreshAfter
    name: Refresh After
    types: List of Text String
    description: |
      Refreshes chart data each time a specified event completes. Valid values: "RECORD_ACTION".
  - keyword: refreshInterval
    name: Refresh After an Interval of Time
    types: Number (Decimal)
    description: |
      How often chart data gets refreshed in minutes. When null, chart data will not be refreshed on an interval. Valid values: "0.5", "1", "2", "3", "4", "5", "10", "30", and "60". 
  - keyword: refreshOnReferencedVarChange
    name: Refresh on Reference Variable Change
    types: Boolean
    description: |
      When true, chart data will be refreshed each time the value of any variable referenced in the data parameter is updated. To refresh chart data when another variable that is not used in the data parameter changes, use refreshOnVarChange. Default: true. 
  - keyword: refreshOnVarChange
    name: Refresh on Variable Change
    types: Any Type
    description: |
      Refreshes chart data each time any of these specific variables change. This allows you to refresh the chart data when a variable that is not referenced in the data parameter is updated. You can define a single variable (e.g. refreshOnVarChange: local!var1) or a list of variables (e.g. refreshOnVarChange: {local!var1, local!var2}).
reftype: sailcomponent
scdisplayname: Bar Chart
space: sail_component

Function
{% include fncsyntax.html %}
{{ page.excerpt }}
See also:

Line Chart
Column Chart
Pie Chart
Area Chart
Scatter Chart
Chart Series
Charts design guidance
Chart Color Schemes
Configure Charts Using Records

Parameters
{% include parameter_table.html parameters=page.parameters header=page.reftype %}
Configuration
There are two ways to configure a bar chart:

Set a record type as the data source and define fields to display on the chart.
Perform your own query and define lists of data within the categories and series.

If you have a record type that uses a database as the source, or a record type with data sync enabled, we recommend using the record type as the source of your chart. This configuration is easier because Appian will perform the query for you and display the results directly in the chart.
If your record type uses a web service as the source and does not have data sync enabled, use the categories and series to construct the chart manually.
Using record data
Configuring a bar chart using a record type as the source requires using two parameters: data and config. Once you provide a record type in the data parameter and provide the fields in the config parameter, the chart displays the results.
See Chart Configuration Using Record Data for details on using a record type as the source. See Build Reports from Records for examples of reports created with different charts.
Using categories and series
When using categories and series, you must provide the list of data labels and values directly to these parameters. 
Categories

The order of items in the categories array determines the display order of categories on the chart with the left-most item in the array appearing at the top of the x-axis. The x-axis is the vertical axis since the bar data displays horizontally.
For each null or empty item in the array passed to categories, [Category #] displays on the x-axis with # as the index number in the categories array of the null or empty item. For example, [Category 1].
The index of each item in the categories array must match with the index of its series data value. 

Series

A single series item produces a bar for each categories item with all bars the same color. The data parameter should contain a list of values that match the size of the list for categories.
Use a!chartSeries() to create the Chart Series array.
If the series argument has a non-null label value paired with a 0, null, or empty data value, the data value still displays in the legend.
If the series argument has a null or empty label value paired with a non-null data value, the label value displays as [Series #] with # as the index number of the data value. For example, [Series 1].
If a color is defined at the series level, it will show for the given scheme and move the color scheme colors to the next series.

Series and stacking

Multiple series items when stacking is NONE or null produces a set of bars for each categories item - one bar for each series item with each bar in that set a different color. The order of the label items determine the display order of the columns in each set with the first bar displays furthest from the axis. 
Multiple series items when stacking is NORMAL produces a single bar for each categories item with each series item displayed as a different segment of the bar in a different color, so they appear stacked on top of each other. The order of the label items determine the display order of the bar segments with the first label item appearing closest to the axis.
Multiple series items when stacking is PERCENT_TO_TOTAL also shows a single bar for each category, but bars have a total height of 100%. Each value shows the percent contribution to the total within each category.

Usage considerations
Chart data and stacking

If data values are small and less than a whole number, Appian recommends settings allowDecimalAxisLabels to true.
If data contains a!recordData or a record type reference, the categories and series parameters are ignored.
The Percent to Total stacking will update the axes and tooltips to show with a percentage. Also, the minimum and maximum y-axes values refer to percentages. For example, yAxisMax: 50 would set the maximum y-axis at 50%.

Charts height and background color

When the "AUTO" height is used, the chart will show as Medium height with 20 or less categories. If more categories are provided, the chart will expand in height to ensure categories are not cut off.
When the chart is placed in a colored card, the chart background will match the color of the card. Text labels and lines in the chart will also adjust if a dark background color is used. See the SAIL Design System for best practices on using charts with background colors.

Chart refresh behavior

You can define a!refreshVariable parameters directly in the chart without creating additional local variables. The only exception being refreshOnVarChange, which refreshes the chart after a specific local variable has changed.
When you use a record type as the source of your chart, it's recommended to use the refresh parameters in the chart instead of using local variables and the a!refreshVariable() function. This is because the refresh behavior will automatically apply to the fields specified in the data parameter of the chart.
If you're not using a record type as the source of your chart, use local variables and the a!refreshVariable() function to define refresh behavior since you won't use the data parameter to configure your chart. 

Examples
The examples below demonstrate how to configure your charts using categories and series. For examples on using record data, see Chart Configuration Using Record Data.
Single series bar chart with label, y-axis title, and no legend
INCLUDE PAGE: SAIL intro
{% sailbox 840 %}
a!barChartField(
  categories: {"Baseball", "Hockey", "Soccer"},
  series: {
    a!chartSeries(label: "Points", data: {8.3, 3.02, 2.71})
  },
  colorScheme: "CLASSIC",
  yAxisTitle: "Average Point per Professional Game",
  showLegend: false,
  showDataLabels: true
)
{% endsailbox %}
Multiple series bar chart with label, y-axis title, and no stacking
INCLUDE PAGE: SAIL intro
{% sailbox 840 %}
a!barChartField(
  categories: {"Americas", "EMEA", "APAC"},
  series: {
    a!chartSeries(label: "Referrals", data: {19, 8, null}),
    a!chartSeries(label: "Existing Clients", data: {11, 16, 10}),
    a!chartSeries(label: "Tradeshow Attendees", data: {14, 12, 7})
  },
  yAxisTitle: "Active Opportunities",
  showLegend: true,
  colorScheme: "CLASSIC"
)
{% endsailbox %}
Multiple series bar chart with label, y-axis title, and stacking
INCLUDE PAGE: SAIL intro
{% sailbox 840 %}
a!barChartField(
  categories: {"Americas", "EMEA", "APAC"},
  series: {
    a!chartSeries(label: "Referrals", data: {19, 8, null}),
    a!chartSeries(label: "Existing Clients", data: {11, 16, 10}),
    a!chartSeries(label: "Tradeshow Attendees", data: {14, 12, 7})
  },
  colorScheme: "RAINFOREST",
  yAxisTitle: "Active Opportunities",
  stacking: "PERCENT_TO_TOTAL",
  showLegend: true
)
{% endsailbox %}