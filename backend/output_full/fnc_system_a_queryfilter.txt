
layout: function
title: a!queryFilter() Function
category: function_page
excerpt: 'Creates a value of type QueryFilter for use with a!pickerFieldRecords(), a!queryRecordType(), a!recordData(), a!relatedRecordData(), a!recordFilterListOption(), or a!query().'
fnccat: System
fncexample: 'a!queryFilter(field: "name", operator: "=", value: 1)'
fncname: a!queryFilter
fncresult: '[field=name, operator==, valueExpression=, value=1]'
compatibility: -crf, ~portal, ~om
parameters:
  - keyword: field
    name: Field
    types: Any Type
    description: |
      The name of the field or relationship to be filtered. When filtering record data, use the recordType! domain to reference a record field, related record field, or record type relationship. For example, recordType!Case.fields.caseName. When filtering data from a data store entity, use the field name in quotations. For example, "department".
  - keyword: operator
    name: Operator
    types: Text
    description: |
      Filter operator to apply to the data. Valid values: "=", "<>", ">", ">=", "<", "<=", "between", "in", "not in", "is null", "not null", "starts with", "not starts with", "ends with", "not ends with", "includes", "not includes".
  - keyword: value
    name: Value
    types: Any Type
    description: |
      The value to compare to the given field using the given operator. Can be entered as an expression. Optional if the operator value is "is null" or "not null". Filter is ignored if value is empty or null and operator is neither "is null" or "not null".
  - keyword: applyWhen
    name: Apply When
    types: Boolean
    description: |
      Determines whether the filter is applied on the query. When set to false, the filter is not evaluated. Default: true.
permalink: fnc_system_a_queryfilter.html
reftype: function
space: function_page

Function
{% include fncsyntax.html %}
{{ page.excerpt }}
Parameters
{% include parameter_table.html parameters=page.parameters header=page.reftype %}
Returns
QueryFilter
Usage considerations
Filter record data
You can filter record data in:
- Records-powered charts
- Records-powered grids
- User filters
- a!queryRecordType()
- a!measure()
Filter record data in a chart or grid
When applying a filter to a records-powered chart or grid, you must reference record fields or related record fields from the record type specified in a!recordData(). 
For example, lets say you want to create a pie chart to show the number of employees per department, and you want to filter by employee status. Since a!recordData() references the Employee record type in the recordType parameter, the filter must reference a field starting from recordType!Employee.
sail
{
  a!pieChartField(
    data: a!recordData(
!     recordType: recordType!Employee,
      filters: a!queryLogicalExpression(
        operator: "AND",
        filters: {
          a!queryFilter(
!           field: recordType!Employee.relationships.employeeStatus.fields.isActive,
            operator: "=",
            value: true
          )
        },
        ignoreFiltersWithEmptyValues: true
      )
    ....
Filter record data in a query
When applying a filter to a query, you must reference record fields or related record fields from the recordType parameter of the a!queryRecordType() function.
For example, if you're querying data from the Employee record type, your filter must reference a field starting from recordType!Employee.
sail
a!queryRecordType(
! recordType: recordType!Employee,
  fields: { 
     recordType!Employee.fields.fullName,
     recordType!Employee.fields.username,
     recordType!Employee.fields.officeNumber
  },
  filters: a!queryFilter(
!   field: recordType!Employee.fields.isRemote,
    operator: "=",
    value: false
  ),
  pagingInfo: a!pagingInfo(
    startIndex: 1, batchSize: 400
  )
).data
Filter record data in a!measure {#measure}
When your record type has data sync enabled, you can add filters to the a!measure() function to determine which values are calculated.
You can filter on a record field or a related record field, and the field reference must start from the aggregated record type.
For example, you have a Customer record type that has a relationship with the Order record type. In a report, you want to calculate the number of orders for each customer that include the order item "Printer". Since you're aggregating on the Order record type, the field reference in the filter must start from recordType!Order.
The a!measure() function would look something like this:
sail
  a!measure(
    function: "COUNT",
!   field: recordType!Customer.relationships.orders.fields.id,
    alias: "count_of_id",
    /* Since the Order record type is the related record type used in the field parameter, 
    we'll use that record type reference in the filter.*/
    filters: {
      a!queryFilter(
!     field: recordType!Order.relationships.orderItem.fields.itemName,
      operator: "=",
      value: "Printer"
        )
      }
    )
Case sensitivity on record types with data sync enabled
If you are querying a record type with data sync enabled--whether it's in an a!queryRecordType expression, records-powered chart, or records-powered grid--note that filter values are case sensitive when using the = or <> operators. 
For example, if you only want to return cases that have a status of "Open", your filter value must also be capitalized. If you set the filter value to "open" (lowercase), the filter will not return the expected results. 
sail
a!queryRecordType(
  recordType: recordType!Customer,
  filters: a!queryFilter(
    field: recordType!Customer.fields.status,
    operator: "=".
    value: "Open"
  ),
  pagingInfo: a!pagingInfo(startIndex: 1, batchSize: 500)
)
All other operators, like in, starts with, and not in are not case sensitive. 
"At least one" filter behavior {#prodlink-at-least-one}
When you filter by a related record field from a one-to-many relationship (i.e., the "many" side of the relationship), the filter will return all records from the base record type (the "one" side of the relationship) that have at least one related record that meets the filter condition.
For example, let's say you have the Order record type and the Order Item record type, and you want to know the number of orders that have at least one order item purchased with a promo code.
Since there is a one-to-many relationship between Order and Order Item (one order can have many items purchased with or without a promo code), you can create a query to count all orders that have at least one order item has appliedPromoCode = true.
The expression would look something like this:
sail
a!queryRecordType(
  recordType: recordType!Order,
  fields: a!aggregationFields(
    groupings: a!grouping(
      field: recordType!Order.fields.orderDate,
      interval: "YEAR",
      alias: "orderDate"
    ),
    measures: a!measure(
      field: recordType!Order.fields.orderId,
      function: "COUNT",
      alias: "ordersWithPromos",
    /* Only count orders that have at least one item 
  purchased with a promo code */
     filters: a!queryFilter(
       field: recordType!Order.relationships.orderItems.fields.appliedPromoCode,
       operator: "=",
       value: true
     ) 
    )
  ),
  pagingInfo: a!pagingInfo(
    startIndex: 1, batchSize: 100
  )
).data
This "at least one" behavior applies when there is a one-to-many relationship in the path between where you are selecting data or aggregating data, and where you are filtering. 
In this example, we are aggregating on the Order record type, and filtering on the Order Item record type (Order ---< Order Item), which is why we observe the "at least one" behavior.
Now, let's say we change our example so promo codes are stored in the Promo Code record type, which has a many-to-one relationship with the Order Items record type (Order Item >--- Promo Code). 
If you change the above expression to filter on the Promo Code record type, you would still observe the "at least one" behavior because there is a one-to-many relationship in the path between Orders (where you are aggregating) and Promo Codes (where you are filtering). The path looks like this Orders ---< Order Item >--- Promo Code.
The expression would look something like this:
sail
a!queryRecordType(
  recordType: recordType!Order,
  fields: a!aggregationFields(
    groupings: a!grouping(
      field: recordType!Order.fields.orderDate,
      interval: "YEAR",
      alias: "orderDate"
    ),
    measures: a!measure(
      field: recordType!Order.fields.orderId,
      function: "COUNT",
      alias: "ordersWithPromos",
    /* Only count orders that have at least one item 
  purchased with a promo code */
     filters: a!queryFilter(
       field: recordType!Order.relationships.orderItems.relationships.promoCodes.fields.codeName,
       operator: "<>"
       value: "No Promo Code"
     ) 
    )
  ),
  pagingInfo: a!pagingInfo(
    startIndex: 1, batchSize: 100
  )
).data
See a!queryLogicalExpression() to learn how to filter by multiple fields from the same one-to-many relationship using the "AND_ALL" operator. This is the recommended operator to use when filtering by fields from the same one-to-many relationship.
Filter related record data returned from a one-to-many relationship
When a query or grid returns data from a one-to-many relationship, up to 10 related records will be returned. You can filter the related records returned from a one-to-many relationship using the a!relatedRecordData() function.
See Filtering and sorting the related record set for more information.
Using a relationship reference in the field parameter
You can use a record type relationship reference in the field parameter when the operator is set to "is null" or "not null". This allows you to only return records that do or do not have any related records. 
For example, the following query will only return employees that are assigned to a team.
sail
a!queryRecordType(
  recordType: recordType!Employee,
  filters: a!queryFilter(
    field: recordType!Employee.relationships.teams,
    operator: "not null"
  ),
  pagingInfo: a!pagingInfo(
    startIndex: 1, batchSize: 100
  )
).data

appian-style-note
You can only use a relationship reference to filter your data when configure the filter in expression mode. You cannot filter by a relationship reference in the query editor, or in design mode from any records-powered component.

Using the operator parameter
INCLUDE PAGE: Filter condition options
Examples
The following examples illustrate how to filter data in a!queryRecordType() for a sample Case record type.
See Query Recipes for more examples filtering data from a record type or from a data store entity.
Record type object references are specific to each environment. If you copy and paste these examples into your interface, they will not evaluate. Use them as a references only.
Return cases created this year
The following query returns all cases created at the beginning of the year until today's date.
For example, if today's date was March 24, 2020, then the query would return all cases created on January 1, 2020 until March 24, 2020.
sail 
a!queryRecordType(
  recordType: recordType!Case,
  filters: 
    a!queryFilter(
      field: recordType!Case.fields.createdon,
      operator: "between",
      value: /* Year-to-Date */{ date(year(today()), 1, 1), today() }
      ),
  pagingInfo: a!pagingInfo(startIndex: 1, batchSize: 100)
).data

appian-style-tip
If you use the query editor to create your query, you can select from a list of Date Presets to easily choose the time frame you want to filter by.

Return cases for customers in the Retail and Real Estate industries
The following query returns all cases for customers who are in either the Retail or Real Estate industry.
sail
a!queryRecordType(
  recordType: recordType!Case,
  filters: a!queryFilter(
    field: recordType!Case.relationships.customer.relationships.industry.fields.label,
    operator: "in",
    value: { "Retail", "Real Estate" }
  ),
  pagingInfo: a!pagingInfo(startIndex: 1, batchSize: 100)
).data
The in operator allows you to provide an array of values, so only records that match one of the provided values are returned. This operator looks for exact matches only. This is different from the includes operator, which does not accept an array of values, and will return any records that contain any portion of the provided value. 
For example, the following query would return any cases for customers who have an R in the industry name.
sail
a!queryRecordType(
  recordType: recordType!Case,
  filters: a!queryFilter(
        field: recordType!Case.relationships.customer.relationships.industry.fields.label,
        operator: "includes",
        value: "R"
  ),
  pagingInfo: a!pagingInfo(startIndex: 1, batchSize: 100)
).data
This means that if there are four types of industries: Retail, Real Estate, Healthcare, and Hotels, the query would only return cases for customers in the Retail, Real Estate, and Healthcare industries since they all contain the letter R.
Return all open and in progress cases
The following query returns all cases that have a status of "Open" or "In progress". Since there are three total status: Open, In Progress, or Closed, you can use the <> operator to return any cases that do not equal "Closed".
sail
a!queryRecordType(
  recordType: recordType!Case,
  filters: a!queryFilter(
    field: recordType!Case.fields.status,
    operator: "<>",
    value: "Closed"
  ),
  pagingInfo: a!pagingInfo(startIndex: 1, batchSize: 100)
).data